-- Create blacklist_entry table
CREATE TABLE blacklist_entry (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nickname VARCHAR(64) NOT NULL,
    uuid VARCHAR(36) UNIQUE NOT NULL,
    reason VARCHAR(256) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create admin_user table
CREATE TABLE admin_user (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(64) UNIQUE NOT NULL,
    password_hash VARCHAR(256) NOT NULL,
    role VARCHAR(16) NOT NULL CHECK (role IN ('owner', 'admin', 'moderator'))
);

-- Create indexes
CREATE INDEX idx_blacklist_nickname ON blacklist_entry (LOWER(nickname));
CREATE INDEX idx_blacklist_uuid ON blacklist_entry (LOWER(uuid));
CREATE INDEX idx_blacklist_created_at ON blacklist_entry (created_at DESC);
CREATE INDEX idx_admin_username ON admin_user (LOWER(username));

-- Enable Row Level Security (RLS)
ALTER TABLE blacklist_entry ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_user ENABLE ROW LEVEL SECURITY;

-- Create policies for blacklist_entry
CREATE POLICY "Enable read access for all users" ON blacklist_entry
    FOR SELECT USING (true);

CREATE POLICY "Enable write access for authenticated users" ON blacklist_entry
    FOR ALL USING (auth.role() IN ('authenticated', 'service_role'));

-- Create policies for admin_user
CREATE POLICY "Enable read access for authenticated users" ON admin_user
    FOR SELECT USING (auth.role() IN ('authenticated', 'service_role'));

CREATE POLICY "Enable write access for service role only" ON admin_user
    FOR ALL USING (auth.role() = 'service_role'); 